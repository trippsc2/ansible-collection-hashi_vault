DOCUMENTATION:
  module: vault_pki_root_ca_certificate
  version_added: 1.2.0
  author:
    - Jim Tarpley (@trippsc2)
  short_description: Configures a PKI root CA certificate in HashiCorp Vault
  description:
    - Ensures a L(PKI secret engine root CA certificate,https://hvac.readthedocs.io/en/stable/usage/secrets_engines/pki.html#generate-root)
      is configured in HashiCorp Vault.
  extends_documentation_fragment:
    - trippsc2.hashi_vault.attributes
    - trippsc2.hashi_vault.auth
    - trippsc2.hashi_vault.connection
    - trippsc2.hashi_vault.engine_mount
    - trippsc2.hashi_vault.requirements
  options:
    state:
      type: str
      required: false
      default: present
      choices:
        - present
        - absent
      description:
        - The expected state of the root CA certificate.
    common_name:
      type: str
      required: false
      description:
        - The common name for the root CA certificate.
        - Required when O(state=present).
    export_private_key:
      type: bool
      required: false
      default: false
      description:
        - Whether to export the private key when creating the root certificate.
        - If set to V(true), the private key will be returned in the response without no_log masking.
    alt_names:
      type: list
      required: false
      elements: str
      description:
        - The list of Subject Alternative Names (SANs) to include in the certificate.
        - These can be host names (DNS names) or email addresses.
        - If not provided, no SANs will be included.
    ip_sans:
      type: list
      required: false
      elements: str
      description:
        - The list of IP Address Subject Alternative Names (SANs).
        - These can be IPv4 or IPv6 addresses.
        - If not provided, no IP SANs will be included.
    uri_sans:
      type: list
      required: false
      elements: str
      description:
        - The list of URI Subject Alternative Names.
        - If not provided, no URI SANs will be included.
    other_sans:
      type: list
      required: false
      elements: dict
      description:
        - The list of custom OID/UTF8-string SANs.
        - If not provided, no custom SANs will be included.
      suboptions:
        oid:
          type: str
          required: true
          description:
            - The OID for the custom SAN.
        type:
          type: str
          required: false
          default: utf8
          choices:
            - utf8
          description:
            - The type of the custom SAN.
        value:
          type: str
          required: true
          description:
            - The value of the custom SAN.
    ttl:
      type: str
      required: false
      description:
        - The expiration duration of the root certificate to be generated.
        - This value can be provided as a duration string, such as V(72h), or as an number of seconds.
        - This must be less than or equal to the value of the C(max_ttl) parameter of the PKI secrets engine.
        - If not provided, the value of the C(default_lease_ttl) parameter of the PKI secrets engine will be used.
    format:
      type: str
      required: false
      choices: 
        - pem
        - der
        - pem_bundle
      description:
        - The format of the returned CA certificate data.
        - If V(pem_bundle), the certificate field will contain the private key (if exported) and
          certificate concatenated.
        - If not provided, the certificate will be returned in PEM format.
    private_key_format:
      type: str
      choices:
        - der
        - pkcs8
      description:
        - The format for marshaling the private key.
        - If set to V(der) and O(format=pem) or O(format=pem_bundle), the private key will be returned in PEM-encoded DER format.
        - If set to V(der) and O(format=der), the private key will be returned in base64-encoded DER format.
        - If set to V(pkcs8), the private key will be returned in PEM-encoded PKCS8 format.
        - If not provided, the private key will be marshaled as if the V(der) value was provided.
    key_type:
      type: str
      required: false
      choices: 
        - rsa
        - ec
      description:
        - The desired private key algorithm type.
        - If not provided, the private key will use the RSA algorithm.
    key_bits:
      type: int
      required: false
      choices:
        - 224
        - 256
        - 384
        - 521
        - 2048
        - 3072
        - 4096
        - 8192
      description:
        - The number of bits to use for generated keys.
        - If O(key_type=rsa), the allowed values are V(2048), V(3072), V(4096), and V(8192).
        - If not provided and O(key_type=rsa), this defaults to V(2048) on new roles.
        - If O(key_type=ec), the allowed values are V(224), V(256), V(384), and V(521).
        - If not provided and O(key_type=ec), this defaults to V(256) on new roles.
    max_path_length:
      type: int
      required: false
      description:
        - The maximum path length to encode in the generated certificate.
        - If set to V(-1), no limit is given.
        - If set to V(0), no CA certificates can be signed by this CA.
        - If not provided, the default is V(-1).
    exclude_cn_from_sans:
      type: bool
      required: false
      description:
        - Whether to exclude the common name from the Subject Alternate Names (SANs).
        - If set to V(true), the given O(common_name) will not be added to the list of SANs.
        - If set to V(false), the given O(common_name) will be added to the list of SANs and parsed as a
          DNS name or email address.
    permitted_dns_domains:
      type: list
      required: false
      elements: str
      description:
        - The list of DNS domains for which certificates are allowed to be issued or signed by this CA
          certificate.
        - Note that subdomains are allowed, as per L(RFC5280,https://tools.ietf.org/html/rfc5280\#section-4.2.1.10).
        - If not provided, all DNS domains are permitted.
    ou:
      type: list
      required: false
      elements: str
      description:
        - The Organizational Unit (OU) values to include in the CA certificate.
        - If not provided, this defaults to an empty list on new roles.
    organization:
      type: list
      required: false
      elements: str
      description:
        - The Organization (O) values to include in the CA certificate.
        - If not provided, this defaults to an empty list on new roles.
    country:
      type: list
      required: false
      elements: str
      description:
        - The Country (C) values to include in the CA certificate.
        - If not provided, this defaults to an empty list on new roles.
    locality:
      type: list
      required: false
      elements: str
      description:
        - The Locality (L) values to include in the CA certificate.
        - If not provided, this defaults to an empty list on new roles.
    province:
      type: list
      required: false
      elements: str
      description:
        - The Province or State (ST) values to include in the CA certificate.
        - If not provided, this defaults to an empty list on new roles.
    street_address:
      type: list
      required: false
      elements: str
      description:
        - The Street Address values to include in the CA certificate.
        - If not provided, this defaults to an empty list on new roles.
    postal_code:
      type: list
      required: false
      elements: str
      description:
        - The Postal Code values to include in the CA certificate.
        - If not provided, this defaults to an empty list on new roles.
    serial_number:
      type: str
      required: false
      description:
        - The serial number of the root CA certificate.
        - If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5.
        - If not provided, HashiCorp Vault will generate a random serial number for the certificate.
EXAMPLES: |
  - name: Ensure root CA certificate is configured
    trippsc2.hashi_vault.vault_pki_root_ca_certificate:
      url: https://vault:8201
      auth_method: userpass
      username: '{{ user }}'
      password: '{{ passwd }}'
      engine_mount_point: pki
      common_name: my-root-ca
      state: present

  - name: Ensure root CA certificate is not configured
    trippsc2.hashi_vault.vault_pki_root_ca_certificate:
      url: https://vault:8201
      auth_method: userpass
      username: '{{ user }}'
      password: '{{ passwd }}'
      engine_mount_point: pki
      state: absent

RETURN:
  certificate:
    description: The root CA certificate.
    type: str
    returned: O(state=present)
  private_key:
    description: The private key for the root CA certificate.
    type: str
    returned: |
      changed
      O(state=present)
      O(export_private_key=true)
  prev_certificate:
    description: The previous root CA certificate.
    type: str
    returned: |
      changed
      O(state=absent)
